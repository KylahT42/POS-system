# -*- coding: utf-8 -*-
"""Thomas_Hunt_Thomas_Major_Project_ITT103_SP2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzE7sg91IKhMw-ohFXBaoMo_I2FLSd0U
"""

# Sample product catalog (minimum 10 items)
product_catalog = {
    "Apples": {"price": 150, "stock": 20},
    "Bananas": {"price": 100, "stock": 25},
    "Bread": {"price": 250, "stock": 15},
    "Milk": {"price": 300, "stock": 10},
    "Rice": {"price": 500, "stock": 18},
    "Soap": {"price": 120, "stock": 30},
    "Toothpaste": {"price": 200, "stock": 12},
    "Water Bottle": {"price": 100, "stock": 40},
    "Eggs": {"price": 180, "stock": 22},
    "Cheese": {"price": 450, "stock": 8}
}


#Shows list of products available
def display_product():
 print("\n======== BEST BUY ==========")
 print("                ItemList                    ")
 print("--------------------------------------------")
 for item, details in product_catalog.items():
    print(f"{item}: Price  {details['price']} Stock {details['stock']}")
 print("===========================================")
shopping_cart = {}
#Adds item/s to cart
def add_to_cart(product_name, quantity):
    if product_name in product_catalog:
        if product_catalog[product_name]["stock"] >= quantity:
            if product_name in shopping_cart:
                shopping_cart[product_name] += quantity
            else:
                shopping_cart[product_name] = quantity
            product_catalog[product_name]["stock"] -= quantity
            print(f"{quantity} x {product_name} added to cart.")
        else:
            print("Not enough stock.")
    else:
        print("Product not found.")
#Removes item/s from cart
def remove_from_cart(product_name):
    if product_name in shopping_cart:
        quantity = shopping_cart[product_name]
        try:
            proddel = int(input("How many do you want to delete? "))
            if proddel <= 0:
                print("Please enter a positive number.")
                return
            if proddel > quantity:
                print(f"You only have {quantity} x {product_name} in the cart.")
                return
            shopping_cart[product_name] -= proddel
            product_catalog[product_name]["stock"] += proddel
            if shopping_cart[product_name] == 0:
                del shopping_cart[product_name]
            print(f"{proddel} x {product_name} removed from cart.")
        except ValueError:
            print("Invalid input. Please enter a number.")
    else:
        print("Item not in cart.")
#Views item/s in cart
def view_cart():
    if not shopping_cart:
        print("Cart is empty.")
        return
    print("\nItems in Cart:")
    total = 0
    for item, newquan in shopping_cart.items():
        price = product_catalog[item]["price"]
        item_total = price * newquan
        print(f"{item}: {newquan} x {price} = {item_total}")
        total += item_total
    print(f"Subtotal: {total}")
#Calculates the total for the items in cart
def calculate_totals():
    subtotal = sum(product_catalog[item]["price"] * quantity for item, quantity in shopping_cart.items())
    tax = subtotal * 0.10
    discount = 0
    if subtotal > 5000:
        discount = subtotal * 0.05
    total_due = subtotal + tax - discount
    return subtotal, tax, discount, total_due
#Checkout menu for items to be purchased
def CHECKOUT_menu():
    print("\n===== CHECKOUT MENU =====")
    print("1. Add Item to Cart")
    print("2. Remove Item from Cart")
    print("3. View Cart")
    print("4. Checkout")

def checkout():
    if not shopping_cart:
        print("Cart is empty. Add items before checkout.")
        return

    subtotal, tax, discount, total_due = calculate_totals()
    print("\n--- Checkout ---")
    print(f"Subtotal: {subtotal}")
    print(f"Sales Tax (10%): {tax}")
    if discount > 0:
        print(f"Discount (5%): -{discount}")
    print(f"Total Due: {total_due}")

    response = input("Do you want to proceed? (Y for yes, N for no): ").upper()

    while response == 'N':
        CHECKOUT_menu()
        checkchoice = input("Enter your choice: ")

        if checkchoice == '1':
            product = input("Enter product name: ").title()
            try:
                quantity = int(input("Enter quantity: "))
                add_to_cart(product, quantity)
            except ValueError:
                print("Please enter a valid number.")
        elif checkchoice == '2':
            product = input("Enter product name to remove: ").title()
            remove_from_cart(product)
        elif checkchoice == '3':
            view_cart()
        elif checkchoice == '4':

            return checkout()
        else:
            print("Invalid choice. Please try again.")

        response = input("\nDo you want to proceed to checkout now? (Y for yes, N for no): ").upper()

    while True:
        try:
            amount_paid = float(input("Enter amount received: "))
            if amount_paid < total_due:
                print("Insufficient payment. Please try again.")
            else:
                change = amount_paid - total_due
                print(f"Change: {change}")
                generate_receipt(subtotal, tax, discount, total_due, amount_paid, change)
                shopping_cart.clear()
                break
        except ValueError:
            print("Invalid input. Enter a valid number.")

#Prints receipt for items purchased
def generate_receipt(subtotal, tax, discount, total_due, amount_paid, change):
    print("\n======== BEST BUY ==========")
    print("                RECEIPT                   ")
    print("------------------------------------------")
    for item, quantity in shopping_cart.items():
        price = product_catalog[item]["price"]
        total = price * quantity
        print(f"{item} x{quantity} @ {price} = {total}")
    print("------------------------------------------")
    print(f"Subtotal: {subtotal}")
    print(f"Tax (10%): {tax}")
    if discount > 0:
        print(f"Discount (5%): -{discount}")
    print(f"Total Due: {total_due}")
    print(f"Amount Paid: {amount_paid}")
    print(f"Change Returned: {change}")
    print("-------------- Cashier Alice -----------")
    print("---------- THANK YOU FOR SHOPPING! ---------")
    print("===========================================")
#Checks products for low quantity(under 5)
def check_low_stock():
    print("\nLow Stock Alert:")
    low = False
    for product, data in product_catalog.items():
        if data["stock"] < 5:
            print(f"{product}: Only {data['stock']} left!")
            low = True
    if not low:
        print("All products have sufficient stock.")
#Displays menu options
def display_menu():
    print("\n===== POINT OF SALE MENU =====")
    print("1. Add Item to Cart")
    print("2. Remove Item from Cart")
    print("3. View Cart")
    print("4. Checkout")
    print("5. View Low Stock Alerts")
    print("6. View Product List")
    print("7. Exit")




def main():
    while True:
        display_menu()
        choice = input("Enter your choice: ")

        if choice == '1':
            product = input("Enter product name: ").title()
            try:
                quantity = int(input("Enter quantity: "))
                add_to_cart(product, quantity)
            except ValueError:
                print("Please enter a valid number.")

        elif choice == '2':
            product = input("Enter product name to remove: ").title()
            remove_from_cart(product)

        elif choice == '3':
            view_cart()

        elif choice == '4':
            checkout()

        elif choice == '5':
            check_low_stock()

        elif choice == '6':
            display_product()

        elif choice == '7':
            print("Exiting... Thank you!")
            break

        else:

            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()